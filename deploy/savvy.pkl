import "@k8s/K8sResource.pkl"
import "@k8s/api/apps/v1/Deployment.pkl"
import "@k8s/api/batch/v1/CronJob.pkl"
import "@k8s/api/core/v1/ConfigMap.pkl"
import "@k8s/api/core/v1/EnvFromSource.pkl"
import "@k8s/api/core/v1/Namespace.pkl"

local projectName = "savvy"

local tag = "v1.0.102"

local img = "ghcr.io/heyajulia/\(projectName):\(tag)"

local ns = new Namespace {
  metadata = new {
    name = projectName
  }
}

local configMap = new ConfigMap {
  metadata = new {
    name = "\(projectName)-config"
    namespace = ns.metadata.name
  }

  data = new {
    ["TG_CHAT_ID"] = "@energieprijzen"
    ["BS_IDENTIFIER"] = "did:plc:o55pshlohxgjgvsg7nusfqdf"
  }
}

local env: Listing<EnvFromSource> = new {
  new {
    configMapRef = new {
      name = configMap.metadata.name
    }
  }

  new {
    secretRef = new {
      name = "\(projectName)-secrets"
    }
  }
}

resources: Listing<K8sResource> = new {
  ns

  configMap

  new Deployment {
    metadata = new {
      name = projectName
      namespace = ns.metadata.name
    }

    spec = new {
      local ls: Mapping<String, String> = new {
        ["app"] = projectName
      }

      replicas = 1

      selector = new {
        matchLabels = ls
      }

      template = new {
        metadata = new {
          labels = ls
        }
        spec = new {
          restartPolicy = "Always"
          containers = new {
            new {
              name = projectName
              image = img
              envFrom = env
            }
          }
        }
      }
    }
  }

  new CronJob {
    metadata = new {
      name = "\(projectName)-report"
      namespace = ns.metadata.name
    }

    spec = new {
      schedule = "1 15 * * *"
      timeZone = "Europe/Amsterdam"
      concurrencyPolicy = "Forbid"
      jobTemplate = new {
        spec = new {
          backoffLimit = 0
          template = new {
            spec = new {
              restartPolicy = "Never"
              containers = new {
                new {
                  name = "\(projectName)-report"
                  image = img
                  command = new { "/home/nonroot/report" }
                  envFrom = env
                }
              }
            }
          }
        }
      }
    }
  }
}

output {
  value = resources

  renderer = (K8sResource.output.renderer as YamlRenderer) {
    isStream = true
  }
}
